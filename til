mkdir 디렉터리이름
ㄴ'디렉터리이름'을 이름으로 갖는 디렉터리(폴더) 생성

cat 파일이름
ㄴ'파일이름'의 파일내용을 화면에 출력함.

ls
ㄴ현재 디렉터리의 내용을 출력함(안에 들어있는것)

cd 디렉터리이름
ㄴ현재 위치에서 접근할 수 있는 '디렉터리이름' 디렉터리로 이동함

cd ..
ㄴ현재 디렉터리를 나감

git init
ㄴGit 저장소를 초기화함

vim 파일이름
ㄴ파일을 열어서 바꿀 수 있게 함
ㄴ작성하기 위해선 'i'를 누르고 작성한다.
작성을 그만두려면 Esc를 눌러 그만두고 :wq를 치고 엔터를 누른다.
w는 저장, q는 나가기.

git status
ㄴ저장소 상태를 확인함 -> 커밋하기 전에 하자.
ㄴgit add한 후에도 상태를 보기 위해서 하자.

git add 파일이름
ㄴGit이 추적할 수 있게 저장소에 추가된 것

git commit
ㄴ커밋을 하는 것
ㄴ이후 커밋 메세지를 작성(무엇을 하였는지 작성)

git commit -a  = git add 파일이름 + git commit
ㄴ'git add 파일이름'과 'git commit'을 동시에 실행하도록 해줌
ㄴ한번에 둘다 하고 싶을 때 편함.

git commit -m "커밋메세지"
ㄴvim을 사용하지 않고 커밋하기.

git commit -am "커밋메세지" = git commit -a + git commit -m
ㄴvim을 사용하지 않고 커밋함과 동시에 Git이 '파일이름'을 추적할 수 있도록 해주는 것


------------branch관련---------------

git branch
ㄴ현재 존재하는 브랜치들을 말해줌
(기본으로 master 브랜치가 존재함)

git branch 브랜치이름
ㄴ'브랜치이름'의 브랜치가 생성됨

git checkout 브랜치이름
ㄴ'브랜치이름'의 브랜치로 들어감(?)

git checkout -b 브랜치이름 = git branch 브랜치이름 + git checkout 브랜치이름
둘다 한꺼번에 할 수 있는 명령어이다.

'브랜치이름'의 브랜치로 들어가면 그 브랜치에만 영향을 끼친다.

master 브랜치로 이동한후!
git merge 브랜치이름
ㄴ'브랜치이름'의 브랜치를 가져와 병합하는 것
병합후 제대로 병합되었는지 확인해보자.

병합을 하지 않으면 각 브랜치마다 다른 내용을 기술할 수 있음.


---------------gitignore---------------

touch .gitignore
ㄴ.gitignore이라는 파일을 만든다
ㄴ아무것도 없는 빈 파일을 만듬.

ls -al
ㄴ모든파일을 나열해줌
ㄴ'.'으로 시작한 파일은 ls에서는 보여주지 않음.
그러므로 ls -al을 쓴다.

gitignore.io
ㄴ.gitignore에 들어가야할 파일을 만들어줌.
생성된것을 모두 복사에 .gitignore에 붙여넣자.

